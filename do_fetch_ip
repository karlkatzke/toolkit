#!/usr/bin/env ruby

# Script to grab the IP address of a Digital Ocean instance.

require "rest-client"
require "json"

defaultkey = String.new
usekey = String.new
apikey = String.new
clientid = String.new
keys = Array.new
host = String.new

def keymatch(keys,keyname)
	keys.each do |k|
		if k[1].chomp == keyname
			return keyname
		end
	end
	return false
end

if ARGV[0] == "--help"
	puts "Fetches IP addresses of digital ocean droplets."
	puts "   Usage: "
	puts "       do_fetch_ip <instance name>"
	puts "       do_fetch_ip all ( Prints all droplet names and their IP. Useful for populating hosts or dns.)"
	puts "       do_fetch_ip --help ( Prints this and exits.)"
	puts " "
	if ARGV.count < 1 
		puts "Error: I need to know what droplet you're looking for."
		exit 1
	else
		exit 0
	end
end

# Load the API key and client ID from a file. 
begin
	configfile = File.new("/Users/karlkatzke/.digitalocean",'r')
	configfile.each_line do |line| 
		if line.split(",").first == "default"
			default = line.split(",")
			defaultkey = default[1].chomp
		elsif line.split(",").first == "key"
			keys << line.split(",")
		end
	end
rescue SystemCallError
	puts "Failed to read configuration file. We need a ~/.digitalocean file to run."
	puts $!
	exit 1
end


if keys.count > 0 
	# There's keys in the configuration file. 
	if keys.count > 1 and keymatch(keys,ARGV[0].chomp)
		# Is there more than one? See if one of the keys matches ARGV[0]... if so, use it.
		usekey = keymatch(keys,ARGV[0].chomp)
		host = ARGV[1].chomp
		# Get the key out of the file.
		# TODO: functionalize
		keys.each do |key|
			if key[1] == usekey
				clientid = key[2]
				apikey = key[3]
			end
		end
	elsif !defaultkey.emtpy? 
		# If we've specified a default, use it. 
		usekey = defaultkey
		host = ARGV[0].chomp
		# Get the key out of the file.
		# TODO: functionalize
		keys.each do |key|
			if key[1] == usekey
				clientid = key[2]
				apikey = key[3]
			end
		end
	else
	# Otherwise, use the only key in the key file
		usekey = keys.first[1]
		host = ARGV[0].chomp
		clientid = keys.first[2]
		apikey = keys.first[3]
	end
else 
	raise "Failed to specify a key."
end

begin 
	response = RestClient.get("https://api.digitalocean.com/droplets/?client_id=#{clientid}&api_key=#{apikey}")
rescue RestClient::Exception => restError
	puts restError.response
end


data = JSON.parse(response)

droplets = data['droplets']


if host == "all"
	# Prints list of all droplets.
	droplets.each do |drop|
		puts "#{drop['name']},#{drop['ip_address']}"
	end
	exit 0
else
	droplets.each do |drop|
		if drop['name'] == host
			print drop['ip_address']
			$stdout.flush
			exit 0
		end
	end
end

# If we get here, we didn't find a name.
puts "Droplet named #{host} not found."
exit 1
